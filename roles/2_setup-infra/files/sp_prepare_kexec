#!/bin/bash

if [[ -z $* ]]; then
    cat <<EOUSAGE
    Usage: $(basename -- "$0") <kernel_version or 0>
    set FORCE_KEXEC=1 in the environment to always run 'kexec -fe'
EOUSAGE
    exit 1
fi
kernel_version="$1"
[[ -z $FORCE_KEXEC ]] && FORCE_KEXEC=0
now="$(date +"%Y-%m-%d_%H-%M-%S")"

DISTRO_REGEX="CentOS|Red Hat Enterprise Linux Server|AlmaLinux|Debian|Ubuntu"

set_grub_default() {
    local default="${1}"
    local grub_cfg="${2}"

    if [[ -z $grub_cfg ]]; then
        if command -v grub2-set-default >/dev/null; then
            grub2-set-default "$default"
            return
        fi
        logger --stderr -t sp_prepare_kexec "Usage: set_grub_default GRUB_DEFAULT_VALUE [/path/to/grub.conf]"
        logger --stderr -t sp_prepare_kexec "grub.conf path required when grub2-set-default is not available!"
        exit 1
    fi

    if command -v grub2-mkconfig >/dev/null; then
        GRUB_UPDATE="grub2-mkconfig"
    elif command -v grub-mkconfig >/dev/null; then
        GRUB_UPDATE="grub-mkconfig"
    else
        logger --stderr -t sp_prepare_kexec "Cannot find GRUB update tool!"
        exit 1
    fi

    if ! sed -i."$now" "s/^GRUB_DEFAULT=.*$/GRUB_DEFAULT=$default/g" /etc/default/grub ; then
        logger --stderr -t sp_prepare_kexec "Failed to update /etc/default/grub"
        exit 1
    fi

    if ! "$GRUB_UPDATE" -o "$grub_cfg" 1>&2; then
        logger --stderr -t sp_prepare_kexec "Failed to update $grub_cfg"
        exit 1
    fi
}

parse_grub_cfg() {
    local grub_cfg="$1"
    if [[ -z $grub_cfg ]]; then
        logger --stderr -t sp_prepare_kexec "Usage: parse_grub_cfg /path/to/grub.cfg"
        exit 1
    fi
    if [[ ! -r $grub_cfg ]]; then
        logger --stderr -t sp_prepare_kexec "GRUB config $grub_cfg is not readable or does not exist"
        return
    fi
    logger --stderr -t sp_prepare_kexec "Using GRUB config $grub_cfg"

    local source
    source="$(mktemp)"
    trap 'rm -f "$source"' EXIT QUIT

    rm -f "$source"
    grep -E -i -w --regexp="^submenu|^menuentry|^[[:space:]]{1,}submenu|^[[:space:]]{1,}menuentry" "$grub_cfg" > "$source"
    local first=""
    local second=""
    while IFS= read -r line ; do
        if  echo "$line" | grep -E -i -w --regexp="^menuentry" > /dev/null ; then
            first="$(echo "$line" | cut -d "'" -f2)"
            if echo "$line" | grep -E -i -w --regexp="$DISTRO_REGEX" | grep -E -i -w "$kernel_version" | \
                grep -E -i -ve "(recovery mode)|rescue" > /dev/null; then
                break
            fi
        fi
        if echo "$line" | grep -E -i -w --regexp="^submenu" > /dev/null; then
            first="$(echo "$line" | cut -d "'" -f2)"
            second=""
            continue
        fi
        if echo "$line" | grep -E -i -w --regexp="^[[:space:]]{1,}submenu" > /dev/null ; then
            logger --stderr -t sp_prepare_kexec "Submenu nesting is not supported"
            exit 1
        fi
        if echo "$line" | grep -E -i -w --regexp="^[[:space:]]{1,}menuentry" > /dev/null; then
            second="$(echo "$line" | cut -d "'" -f2)"
            if echo "$line" | grep -E -i -w --regexp="$DISTRO_REGEX" | \
                grep -E -i -w "$kernel_version" | grep -E -i -v "(recovery mode)|rescue" > /dev/null; then
                break
            fi
        fi
    done < "$source"

    if [[ -z $first ]]; then
        return
    else
        if [[ -z $second ]]; then
            echo "\"$first\"" | sed 's/\//\\\//g'
        else
            echo "\"$first>$second\"" | sed 's/\//\\\//g'
        fi
    fi
}

parse_boot_loader_entries() {
    if [[ ! -d "/boot/loader/entries" ]]; then
        logger --stderr -t sp_prepare_kexec "The /boot/loader/entries directory does not exist, skipping"
        return
    fi

    local conf_file
    # shellcheck disable=SC2012
    conf_file="$(ls -1t /boot/loader/entries/*"${kernel_version}"*.conf 2>/dev/null| head -n1)"
    if [[ -z $conf_file ]]; then
        logger --stderr -t sp_prepare_kexec "No configuration file found for $kernel_version, bailing"
        return
    fi

    local title
    title="$(grep -E '^title' "$conf_file" | sed -nre 's/title (.*)$/\1/p')"
    if [[ -z $title ]]; then
        logger --stderr -t sp_prepare_kexec "No 'title' section in $conf_file, bailing"
        return
    fi

    echo "\"$title\""
}

prepare_kexec_reboot() {
    local vmlinuz
    vmlinuz="$(find /boot -name "vmlinuz-$kernel_version*" | head -n1)"
    if [[ -z $vmlinuz ]]; then
        logger --stderr -t sp_prepare_kexec "Cannot find kernel executable for $kernel_version, bailing"
        exit 1
    fi

    local initrd
    initrd="$(find /boot -name "initramfs-$kernel_version*" -o -name "initrd.img-$kernel_version*" | grep -v kdump | head -n1)"
    if [[ -z $initrd ]]; then
        logger --stderr -t sp_prepare_kexec "Cannot find initrd/initramfs for $kernel_version, bailing"
        exit 1
    fi

    logger --stderr -t sp_prepare_kexec "Loading kernel $vmlinuz with initrd $initrd"
    if ! kexec -l "$vmlinuz" --reuse-cmdline --initrd="$initrd"; then
        logger --stderr -t sp_prepare_kexec "Failed to load new kernel, rebooting normally"
        reboot
    fi

    if [[ $FORCE_KEXEC -eq 1 ]]; then
        logger --stderr -t sp_prepare_kexec "Rebooting into loaded kernel with forced kexec"
        kexec -fe
    else
        if [[ -f "/usr/bin/systemctl" ]]; then
            logger --stderr -t sp_prepare_kexec "Rebooting into loaded kernel using systemctl kexec"
            /usr/bin/systemctl kexec
        else
            logger --stderr -t sp_prepare_kexec "Rebooting into loaded kernel using regular kexec"
            kexec -e
        fi
    fi

    logger --stderr -t sp_prepare_kexec "Rebooting with kexec has failed, rebooting normally"
    reboot
}

if [[ $1 == "0" ]]; then
    set_grub_default 0
    reboot
fi

for cfg in "/boot/grub/grub.cfg" "/boot/grub2/grub.cfg"; do
    new_default="$(parse_grub_cfg "$cfg")"
    if [[ -n $new_default ]]; then
        set_grub_default "$new_default" "$cfg"
        prepare_kexec_reboot
        exit 0
    fi
done

new_default="$(parse_boot_loader_entries)"
if [[ -n $new_default ]]; then
    set_grub_default "$new_default" "$(find /boot/efi/EFI -type f -name grub.cfg | head -n1)"
    prepare_kexec_reboot
    exit 0
fi

logger --stderr -t sp_prepare_kexec "Could not find specified kernel"
exit 1

