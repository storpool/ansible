#!/bin/bash

if [[ -z $* ]]; then
    cat <<EOUSAGE
    Usage: $(basename -- "$0") <kernel_version>
EOUSAGE
    exit 1
fi
kernel_version="$1"

distro_regex="CentOS|Red Hat Enterprise Linux Server|AlmaLinux|Debian|Ubuntu"
prog_name="$0"

log() {
    logger --stderr -t "$prog_name" "$@"
}

set_grub_default() {
    local default="${1}"

    if [[ -z $default ]]; then
        log "Usage: set_grub_default GRUB_DEFAULT_VALUE"
        exit 1
    fi

    now="$(date +"%Y-%m-%d_%H-%M-%S")"
    if ! sed -i."$now" "s/^GRUB_DEFAULT=.*$/GRUB_DEFAULT=$default/g" /etc/default/grub ; then
        log "Failed to update /etc/default/grub"
        exit 1
    fi

    if ! "$GRUB_MKCFG" -o "$GRUB_CFG"; then
        log "Failed to generate new GRUB config"
        exit 1
    fi
}

parse_grub_cfg() {
    local source
    source="$(mktemp)"
    trap 'rm -f "$source"' EXIT QUIT

    rm -f "$source"
    grep -E -i -w --regexp="^submenu|^menuentry|^[[:space:]]{1,}submenu|^[[:space:]]{1,}menuentry" "$GRUB_CFG" > "$source"
    local first=""
    local second=""
    while IFS= read -r line ; do
        if  echo "$line" | grep -E -i -w --regexp="^menuentry" > /dev/null ; then
            first="$(echo "$line" | cut -d "'" -f2)"
            if echo "$line" | grep -E -i -w --regexp="$distro_regex" | grep -E -i -w "$kernel_version" | \
                grep -E -i -ve "(recovery mode)|rescue" > /dev/null; then
                break
            fi
        fi
        if echo "$line" | grep -E -i -w --regexp="^submenu" > /dev/null; then
            first="$(echo "$line" | cut -d "'" -f2)"
            second=""
            continue
        fi
        if echo "$line" | grep -E -i -w --regexp="^[[:space:]]{1,}submenu" > /dev/null ; then
            log "Submenu nesting is not supported"
            exit 1
        fi
        if echo "$line" | grep -E -i -w --regexp="^[[:space:]]{1,}menuentry" > /dev/null; then
            second="$(echo "$line" | cut -d "'" -f2)"
            if echo "$line" | grep -E -i -w --regexp="$distro_regex" | \
                grep -E -i -w "$kernel_version" | grep -E -i -v "(recovery mode)|rescue" > /dev/null; then
                break
            fi
        fi
    done < "$source"

    if [[ -z $first ]]; then
        return
    else
        if [[ -z $second ]]; then
            echo "\"$first\"" | sed 's/\//\\\//g'
        else
            echo "\"$first>$second\"" | sed 's/\//\\\//g'
        fi
    fi
}

get_grub_entry() {
    if command -v grubby >/dev/null; then
        if ! kernel_info=$(grubby --info "/boot/vmlinuz-$kernel_version"); then
            echo "Could not find kernel $kernel_version"
            exit 1
        fi
        entry="$("$kernel_info" | sed -nr -e 's/title=(.*)/\1/p' -e 's/^["\'']//' -e 's/["\'']$//')"
        if [[ -n $entry ]]; then
            echo "$entry"
            return 0
        fi
    fi
    parse_grub_cfg
}

parse_boot_loader_entries() {
    if [[ ! -d "/boot/loader/entries" ]]; then
        log "The /boot/loader/entries directory does not exist, skipping"
        return
    fi

    local conf_file
    # shellcheck disable=SC2012
    conf_file="$(ls -1t /boot/loader/entries/*"${kernel_version}"*.conf 2>/dev/null| head -n1)"
    if [[ -z $conf_file ]]; then
        log "No configuration file found for $kernel_version, bailing"
        return
    fi

    local title
    title="$(grep -E '^title' "$conf_file" | sed -nre 's/title (.*)$/\1/p')"
    if [[ -z $title ]]; then
        log "No 'title' section in $conf_file, bailing"
        return
    fi

    echo "\"$title\""
}

GRUB_CFG=""
for cfg in "/boot/grub/grub.cfg" "/boot/grub2/grub.cfg"; do
    if [[ -f $cfg ]]; then
        GRUB_CFG="$cfg"
        log "Assuming GRUB configuration file is $GRUB_CFG"
        break
    fi
done
if [[ -z $GRUB_CFG ]]; then
    log "Could not find grub.cfg file!"
    exit 1
fi

GRUB_MKCFG=""
for mkcfg in "grub-mkconfig" "grub2-mkconfig"; do
    if command -v "$mkcfg" >/dev/null; then
        GRUB_MKCFG="$mkcfg"
        log "Assuming GRUB mkconfig executable is is $GRUB_MKCFG"
        break
    fi
done
if [[ -z $GRUB_MKCFG || -x $GRUB_MKCFG ]]; then
    log "Could not find a GRUB update executable!"
    exit 1
fi

new_default="$(get_grub_entry "$cfg")"
if [[ -z $new_default ]]; then
    new_default="$(parse_boot_loader_entries)"
fi

if [[ -n $new_default ]]; then
    set_grub_default "$new_default"
    exit 0
else
    log "Could not find kernel $kernel_version"
    exit 1
fi