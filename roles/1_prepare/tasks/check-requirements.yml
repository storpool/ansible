---
- name: Check for a supported Operating System
  assert:
    that:
      - (ansible_distribution == 'Debian' and ansible_distribution_release == 'stretch') or
        (ansible_distribution == 'Debian' and ansible_distribution_release == 'buster') or
        (ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'xenial') or
        (ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'bionic') or
        (ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'focal') or
        (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '6') or
        (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7') or
        (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '8') or
        (ansible_os_family == 'AlmaLinux' and ansible_distribution_major_version == '8')
    msg: >-
      The only supported platforms for this release are Debian Stretch, Ubuntu 18.04 LTS (Bionic),
      CentOS 7/8 or AlmaLinux 8.
  when:
    - (check_operating_system | default(True)) | bool

- name: Identify the space available in /
  shell: >
    df -P -BK / | awk '!/^Filesystem/ {print $4}' | sed 's/K//'
  environment:
    LC_ALL: en_US.UTF-8
  become: true
  changed_when: false
  register: root_space_available
  tags:
    - skip_ansible_lint

- name: Set root disk facts
  set_fact:
    host_root_space_available_bytes: "{{ ( root_space_available.stdout | int) * 1024 | int }}"

- name: Set min size fact
  set_fact:
    host_data_disk_min_size_bytes: "{{ ((bootstrap_host_data_disk_min_size | int) * 1024**3) | int }}"

- name: Set size facts
  set_fact:
    root_gb_available: "{{ ((host_root_space_available_bytes | int ) / 1024**3) | round(2, 'floor') }}"

- name: Fail if there is not enough space available in /
  fail:
    msg: "Not enough space available in / (found {{ root_gb_available }}GB, required {{ bootstrap_host_data_disk_min_size }}GB)"
  when:
    - (host_root_space_available_bytes | int) < (host_data_disk_min_size_bytes | int)

- name: Check if node clock is correct
  assert:
    that:
      - ((localhost_date_time.epoch | int) - (ansible_date_time.epoch | int) | abs) < ( 60 * 60 * 2)
    fail_msg: "Clock of node {{ inventory_hostname }} is not correct"
  vars:
    localhost_date_time: "{{ hostvars['localhost'].ansible_date_time }}"

- name: Searching for host in storpool.conf
  command: "grep {{ ansible_hostname }} {{ sp_config }}"
  delegate_to: localhost
  register: configuration_host_search

- name: Checking if host is defined in storpool.conf
  assert:
    that:
      - configuration_host_search.stdout_lines | length > 0
    fail_msg: 'Host {{ inventory_hostname }} cannot be found in storpool.conf'
